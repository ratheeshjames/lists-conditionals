{"version":3,"sources":["Appbar/Appbar.js","TextField/TextField.js","ValidationComponent/ValidationComponent.js","Char/Char.js","App.js","Theme/Theme.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","prefersAppDarkTheme","useMediaQuery","barTheme","lightTheme","createMuiTheme","palette","primary","main","secondary","type","darkTheme","classes","className","ThemeProvider","AppBar","position","Toolbar","Typography","variant","margin","width","BasicTextFields","props","labelName","helperText","value","length","autoComplete","TextField","id","label","onChange","error","Validation","inputLength","color","Char","character","Card","style","onClick","ButtonBase","CardContent","App","inputChangeHandler","bind","deleteCharHandler","state","userInput","event","this","setState","target","index","text","split","updatedText","join","splice","setTimeout","charList","map","ch","key","Container","display","alignItems","justifyContent","flexDirection","m","Box","component","ValidationComponent","React","Component","Theme","prefersDarkTheme","CssBaseline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d1882a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const prefersAppDarkTheme = useMediaQuery(\"(prefers-color-scheme: dark)\");\r\n  let barTheme = null;\r\n  // Theming Section BEGIN {{{\r\n  const lightTheme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#1976d2\",\r\n      },\r\n      secondary: {\r\n        main: \"#dc004e\",\r\n      },\r\n      type: prefersAppDarkTheme ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#424242\",\r\n      },\r\n      secondary: {\r\n        main: \"#f48fb1\",\r\n      },\r\n      type: prefersAppDarkTheme ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n  if (prefersAppDarkTheme) {\r\n    barTheme = darkTheme;\r\n  } else {\r\n    barTheme = lightTheme;\r\n  }\r\n  // }}} Theming Section END\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <ThemeProvider theme={barTheme}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Lists and Conditionals\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicTextFields(props) {\r\n  const classes = useStyles();\r\n  let labelName = null;\r\n  let helperText = null;\r\n  if (props.value.length > 5) {\r\n    labelName = \"Nice!!\";\r\n    helperText = \"Text is long enough!\";\r\n  } else {\r\n    labelName = \"Error\";\r\n    helperText = \"Text is short!!\";\r\n  }\r\n  return (\r\n    <form className={classes.root} autoComplete=\"off\">\r\n      {props.value.length > 5 ? (\r\n        <TextField\r\n          id=\"filled-basic\"\r\n          label={labelName}\r\n          variant=\"filled\"\r\n          type=\"text\"\r\n          helperText={helperText}\r\n          onChange={props.onChange}\r\n          value={props.value}\r\n        />\r\n      ) : (\r\n        <TextField\r\n          error\r\n          id=\"filled-basic\"\r\n          label={labelName}\r\n          variant=\"filled\"\r\n          type=\"text\"\r\n          helperText={helperText}\r\n          onChange={props.onChange}\r\n          value={props.value}\r\n        />\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Validation = (props) => {\r\n  return (\r\n    <div>\r\n      {props.inputLength > 5 ? (\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          Text is long enough!\r\n        </Typography>\r\n      ) : (\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          Text is short!!\r\n        </Typography>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Validation;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\nfunction Char(props) {\r\n  const cardStyle = {\r\n    margin: \"4px\",\r\n  };\r\n  if (props.character === \" \" || props.character === \"\") {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <Card style={cardStyle} onClick={props.onClick}>\r\n        <ButtonBase>\r\n          <CardContent>\r\n            <Typography variant=\"h6\">{props.character}</Typography>\r\n          </CardContent>\r\n        </ButtonBase>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default Char;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ButtonAppBar from \"./Appbar/Appbar\";\nimport BasicTextFields from \"./TextField/TextField\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ValidationComponent from \"./ValidationComponent/ValidationComponent\";\nimport Char from \"./Char/Char\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n    this.deleteCharHandler = this.deleteCharHandler.bind(this);\n    this.state = {\n      userInput: \"\",\n    };\n  }\n  inputChangeHandler(event) {\n    this.setState({ userInput: event.target.value });\n  }\n  deleteCharHandler(index) {\n    const text = this.state.userInput.split(\"\");\n    let updatedText = text.join(\"\");\n    text.splice(index, 1);\n    updatedText = text.join(\"\");\n    setTimeout(\n      function () {\n        this.setState({ userInput: updatedText });\n      }.bind(this),\n      500\n    );\n  }\n\n  render() {\n    const containerStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n    };\n    const cardStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      flexDirection: \"row\",\n      margin: \"8px\",\n    };\n    const charList = this.state.userInput.split(\"\").map((ch, index) => {\n      return (\n        <Char\n          character={ch}\n          key={index}\n          onClick={() => this.deleteCharHandler(index)}\n        />\n      );\n    });\n    return (\n      <div>\n        <ButtonAppBar />\n        <Container style={containerStyle} m={1}>\n          <Box component=\"span\" m={1}>\n            <BasicTextFields\n              onChange={this.inputChangeHandler}\n              value={this.state.userInput}\n            />\n          </Box>\n          <Box m={1}>\n            <Typography variant=\"body1\">{this.state.userInput}</Typography>\n          </Box>\n          <Box m={1}>\n            <ValidationComponent inputLength={this.state.userInput.length} />\n          </Box>\n          <div>\n            {this.state.userInput !== \"\" ? (\n              <Typography variant=\"body1\">\n                Select the Character to delete:{\" \"}\n              </Typography>\n            ) : null}\n          </div>\n          <div style={cardStyle}>{charList}</div>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport App from \"../App\";\r\n\r\nfunction Theme() {\r\n  const prefersDarkTheme = useMediaQuery(\"(prefers-color-scheme: dark)\");\r\n  let theme = null;\r\n  // Theming Section BEGIN {{{\r\n  const lightTheme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#1976d2\",\r\n      },\r\n      secondary: {\r\n        main: \"#dc004e\",\r\n      },\r\n      type: prefersDarkTheme ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#90caf9\",\r\n      },\r\n      secondary: {\r\n        main: \"#f48fb1\",\r\n      },\r\n      type: prefersDarkTheme ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n  if (prefersDarkTheme) {\r\n    theme = darkTheme;\r\n  } else {\r\n    theme = lightTheme;\r\n  }\r\n  // }}} Theming Section END\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App/>\r\n    </ThemeProvider>\r\n  );\r\n}\r\nexport default Theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Theme from \"./Theme/Theme\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <Theme/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}